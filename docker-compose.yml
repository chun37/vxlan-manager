version: '3.8'

services:
  db:
    image: postgres:14-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-vxlan_admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme_secure_password}
      POSTGRES_DB: ${POSTGRES_DB:-vxlan_manager}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-vxlan_admin}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-vxlan_admin}:${POSTGRES_PASSWORD:-changeme_secure_password}@db:5432/${POSTGRES_DB:-vxlan_manager}
      API_HOST: 0.0.0.0
      API_PORT: 8000
      PING_INTERVAL: ${PING_INTERVAL:-60}
      MAX_PARALLEL_PINGS: ${MAX_PARALLEL_PINGS:-100}
      MAX_MACHINES: ${MAX_MACHINES:-1000}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      CORS_ORIGINS: http://localhost:3000,http://127.0.0.1:3000
    ports:
      - "8000:8000"
    depends_on:
      - db
    cap_add:
      - NET_RAW
    volumes:
      - ./backend:/app
    command: uvicorn src.main:app --host 0.0.0.0 --port 8000 --reload

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      NEXT_PUBLIC_API_URL: http://backend:8000
      NEXT_PUBLIC_WS_URL: ws://localhost:8000
      NODE_ENV: production
    ports:
      - "3000:3000"
    depends_on:
      - backend

volumes:
  postgres_data:
